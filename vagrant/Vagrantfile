# If you use OSX and Virtual Box You need to run:
#
# $ VBoxManage dhcpserver remove --netname HostInterfaceNetworking-vboxnet0
#
# to remove the VirtualBox internal DHCP server... as it's going to interfeer
# with the your environment.

VAGRANTFILE_API_VERSION = "2"
NUM_DHCPSERVERS = 1
NUM_DHCPCLIENTS = 2

# external net => network where lb, relay and dhcp server sit.
EXT_NET_PREFIX = "192.168.10"
# internal net => network where only the client and relay sit.
INT_NET_PREFIX = "192.168.20"

# Following structure represents the list of nodes, please note that the "ips"
# array is in format [internal ip, external ip]. ORDER MATTERS.
nodes = {
  'dhcprelay' =>
    {'ips' => [
      {'ip' => "#{EXT_NET_PREFIX}.101", 'network' => 'external'},
      {'ip' => "#{INT_NET_PREFIX}.101", 'network' => 'internal'},
    ],
     'roles' => ['role[dhcprelay]']},

  # 'dhcplb' =>
  #   {'ips' => ["#{EXT_NET_PREFIX}.102"],
  #    'roles' => ['role[dhcplb]']},
}

# list of dhcpclients
start_ip = 103
(1..NUM_DHCPCLIENTS).each do |i|
  int_ip = {'ip' => "#{INT_NET_PREFIX}.#{start_ip}", 'network' => 'internal'}
  start_ip += 1
  nodes["dhcpclient#{i}"] = 
    {'ips' => [int_ip], 'roles' => ['role[dhcpclient]']}
end

# list of dhcpservers, to be used to configure the dhcplb instance.
dhcpservers_ips = []
start_ip = 103 
(1..NUM_DHCPSERVERS).each do |i|
  int_ip = "#{INT_NET_PREFIX}.#{start_ip}"
  ext_ip = "#{EXT_NET_PREFIX}.#{start_ip}"
  ext_ip_map = {'ip' => ext_ip, 'network' => 'external'}
  start_ip += 1
  nodes["dhcpserver#{i}"] = 
    {'ips' => [ext_ip_map], 'roles' => ['role[dhcpserver]']}
  dhcpservers_ips.push(ext_ip)
end
# nodes['dhcplb']['target_dhcp_servers'] = dhcpservers_ips

# the dhcplb ip the relay needs to point to
nodes['dhcprelay']['targets'] = dhcpservers_ips.join(" ")

Vagrant.configure(VAGRANTFILE_API_VERSION) do |config|
  config.vm.box = "debian/bullseye64"
  config.berkshelf.enabled = true
  config.berkshelf.berksfile_path = "chef/cookbooks/Berksfile"

  nodes.each do |name, node|
    config.vm.define name do |vm|
      vm.vm.hostname = name

      # Enable agent forwarding via SSH
      vm.ssh.forward_agent = true

      ips = node["ips"]
      ips.each do |ip|
        vm.vm.network :private_network, ip: ip['ip'], virtualbox__intnet: ip['network']
      end

      if name == "dhcplb"
        vm.vm.synced_folder "../",
          "/home/vagrant/go/src/github.com/nkprince007/dhcplb/"
      end

      if /dhcpserver\d+/.match(name)
        vm.vm.synced_folder "../../coredhcp",
          "/home/vagrant/go/src/github.com/coredhcp/coredhcp/"
        
        vm.vm.provider :virtualbox do |vb|
          vb.customize ["modifyvm", :id, "--memory", "4096"]
          vb.customize ["modifyvm", :id, "--cpus", "4"]
        end
      end

      if name == "dhcprelay"
        vm.vm.synced_folder "../../dhcprelay",
          "/home/vagrant/go/src/github.com/42wim/dhcprelay/"

        vm.vm.provider :virtualbox do |vb|
          vb.customize ["modifyvm", :id, "--memory", "4096"]
          vb.customize ["modifyvm", :id, "--cpus", "4"]
        end
      end

      vm.vm.provision :chef_solo do |chef|
        chef.arguments = "--chef-license accept"
        chef.cookbooks_path = ["chef/cookbooks"]
        chef.roles_path = "chef/roles"
        chef.add_role("base")
        chef.json = nodes
        node['roles'].each do |role|
          chef.add_role(role)
        end
      end

    end
  end
end

# -*- mode: ruby -*-
# vi: set ft=ruby :
